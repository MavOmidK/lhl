import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Manager } from '@lhl/manager/data-access';
import { ClrCheckboxModule, ClrFormsModule, ClrModalModule, ClrSelectModule } from '@clr/angular';
import { FormsModule } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/forms";
export class ManagerCreateComponent {
    constructor() {
        this.availableTeams = [];
        this.create = new EventEmitter();
        this.opened = false;
        this.size = 'md';
        // Form Properties
        this.name = '';
        this.email = '';
        this.teamId = '';
        this.admin = false;
        this.selectedOption = 'one';
    }
    get teamsWarning() {
        return this.availableTeams.length === 0;
    }
    onClickPlusIcon() {
        this.modal?.open();
    }
    onClickCreate() {
        this.create.emit(this.newManager);
        this.modal?.close();
    }
    onClickCancel() {
        this.modal?.close();
    }
    get newManager() {
        return new Manager('', this.teamId, this.email, this.name, this.teamId !== '', this.admin);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: ManagerCreateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.8", type: ManagerCreateComponent, isStandalone: true, selector: "lhl-manager-create", inputs: { availableTeams: "availableTeams" }, outputs: { create: "create" }, viewQueries: [{ propertyName: "modal", first: true, predicate: ["createManagerModal"], descendants: true, static: true }], ngImport: i0, template: "<button class=\"btn btn-outline\" (click)=\"onClickPlusIcon()\">\n    <i class=\"fa-regular fa-plus\"></i>\n</button>\n\n<clr-modal #createManagerModal [(clrModalOpen)]=\"opened\" [clrModalSize]=\"size\">\n    <div class=\"modal-title\">Add a Manager</div>\n    <div class=\"modal-body\">\n        <form clrForm>\n            <clr-input-container>\n                <label>Name</label>\n                <input clrInput type=\"text\" [(ngModel)]=\"name\" required name=\"name\"/>\n            </clr-input-container>\n            <clr-input-container>\n                <label>Email</label>\n                <input clrInput type=\"email\" [(ngModel)]=\"email\" required name=\"email\" />\n            </clr-input-container>\n            <clr-select-container>\n                <label>Team</label>\n                <div *ngIf=\"teamsWarning\">No available teams</div>\n                <select clrSelect [(ngModel)]=\"teamId\" name=\"team\">\n                    <option *ngFor=\"let availableTeam of availableTeams\" [value]=\"availableTeam.id\">{{availableTeam.name}}</option>\n                </select>\n            </clr-select-container>\n          </form>\n    </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"onClickCancel()\">Cancel</button>\n        <button type=\"button\" type=\"submit\" class=\"btn btn-primary\" (click)=\"onClickCreate()\">Create</button>\n     </div>\n</clr-modal>", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: ClrModalModule }, { kind: "component", type: i2.ClrModal, selector: "clr-modal", inputs: ["clrModalOpen", "clrModalClosable", "clrModalCloseButtonAriaLabel", "clrModalSize", "clrModalStaticBackdrop", "clrModalSkipAnimation", "clrModalPreventClose", "clrModalLabelledById", "clrModalOverrideScrollService"], outputs: ["clrModalOpenChange", "clrModalAlternateClose"] }, { kind: "directive", type: i2.ClrModalBody, selector: ".modal-body" }, { kind: "ngmodule", type: ClrFormsModule }, { kind: "directive", type: i2.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i2.ClrForm, selector: "[clrForm]", inputs: ["clrLabelSize"] }, { kind: "directive", type: i2.ClrInput, selector: "[clrInput]" }, { kind: "component", type: i2.ClrInputContainer, selector: "clr-input-container" }, { kind: "directive", type: i2.ClrSelect, selector: "[clrSelect]" }, { kind: "component", type: i2.ClrSelectContainer, selector: "clr-select-container" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: ClrCheckboxModule }, { kind: "ngmodule", type: ClrSelectModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.8", ngImport: i0, type: ManagerCreateComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lhl-manager-create', standalone: true, imports: [CommonModule, ClrModalModule, ClrFormsModule, FormsModule, ClrCheckboxModule, ClrSelectModule], changeDetection: ChangeDetectionStrategy.OnPush, template: "<button class=\"btn btn-outline\" (click)=\"onClickPlusIcon()\">\n    <i class=\"fa-regular fa-plus\"></i>\n</button>\n\n<clr-modal #createManagerModal [(clrModalOpen)]=\"opened\" [clrModalSize]=\"size\">\n    <div class=\"modal-title\">Add a Manager</div>\n    <div class=\"modal-body\">\n        <form clrForm>\n            <clr-input-container>\n                <label>Name</label>\n                <input clrInput type=\"text\" [(ngModel)]=\"name\" required name=\"name\"/>\n            </clr-input-container>\n            <clr-input-container>\n                <label>Email</label>\n                <input clrInput type=\"email\" [(ngModel)]=\"email\" required name=\"email\" />\n            </clr-input-container>\n            <clr-select-container>\n                <label>Team</label>\n                <div *ngIf=\"teamsWarning\">No available teams</div>\n                <select clrSelect [(ngModel)]=\"teamId\" name=\"team\">\n                    <option *ngFor=\"let availableTeam of availableTeams\" [value]=\"availableTeam.id\">{{availableTeam.name}}</option>\n                </select>\n            </clr-select-container>\n          </form>\n    </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"onClickCancel()\">Cancel</button>\n        <button type=\"button\" type=\"submit\" class=\"btn btn-primary\" (click)=\"onClickCreate()\">Create</button>\n     </div>\n</clr-modal>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { modal: [{
                type: ViewChild,
                args: ['createManagerModal', { static: true }]
            }], availableTeams: [{
                type: Input
            }], create: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci1jcmVhdGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9saGwvbWFuYWdlci91aS9zcmMvbGliL21hbmFnZXItY3JlYXRlL21hbmFnZXItY3JlYXRlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGhsL21hbmFnZXIvdWkvc3JjL2xpYi9tYW5hZ2VyLWNyZWF0ZS9tYW5hZ2VyLWNyZWF0ZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQVksY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM1RyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBVzdDLE1BQU0sT0FBTyxzQkFBc0I7SUFpQmpDO1FBZFMsbUJBQWMsR0FBZ0IsRUFBRSxDQUFDO1FBRWhDLFdBQU0sR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUV0RSxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2YsU0FBSSxHQUFHLElBQUksQ0FBQztRQUVaLGtCQUFrQjtRQUNsQixTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1YsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFDWixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUFFUixDQUFDO0lBRWhCLElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsYUFBYTtRQUVYLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBWSxVQUFVO1FBQ3BCLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RixDQUFDOzhHQXZDVSxzQkFBc0I7a0dBQXRCLHNCQUFzQixzUkNmbkMsNDZDQTZCWSx5RERuQkEsWUFBWSwrUEFBRSxjQUFjLG1jQUFFLGNBQWMsc2ZBQUUsV0FBVywrcERBQUUsaUJBQWlCLDhCQUFFLGVBQWU7OzJGQUs1RixzQkFBc0I7a0JBUmxDLFNBQVM7K0JBQ0Usb0JBQW9CLGNBQ2xCLElBQUksV0FDUCxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLENBQUMsbUJBR3ZGLHVCQUF1QixDQUFDLE1BQU07MEVBR0ksS0FBSztzQkFBdkQsU0FBUzt1QkFBQyxvQkFBb0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBRXhDLGNBQWM7c0JBQXRCLEtBQUs7Z0JBRUksTUFBTTtzQkFBZixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNYW5hZ2VyIH0gZnJvbSAnQGxobC9tYW5hZ2VyL2RhdGEtYWNjZXNzJztcbmltcG9ydCB7IENsckNoZWNrYm94TW9kdWxlLCBDbHJGb3Jtc01vZHVsZSwgQ2xyTW9kYWwsIENsck1vZGFsTW9kdWxlLCBDbHJTZWxlY3RNb2R1bGUgfSBmcm9tICdAY2xyL2FuZ3VsYXInO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUZWFtIH0gZnJvbSAnQGxobC90ZWFtL2RhdGEtYWNjZXNzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGhsLW1hbmFnZXItY3JlYXRlJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQ2xyTW9kYWxNb2R1bGUsIENsckZvcm1zTW9kdWxlLCBGb3Jtc01vZHVsZSwgQ2xyQ2hlY2tib3hNb2R1bGUsIENsclNlbGVjdE1vZHVsZV0sXG4gIHRlbXBsYXRlVXJsOiAnLi9tYW5hZ2VyLWNyZWF0ZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hbmFnZXItY3JlYXRlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBNYW5hZ2VyQ3JlYXRlQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnY3JlYXRlTWFuYWdlck1vZGFsJywgeyBzdGF0aWM6IHRydWUgfSkgbW9kYWw6IENsck1vZGFsIHwgdW5kZWZpbmVkO1xuXG4gIEBJbnB1dCgpIGF2YWlsYWJsZVRlYW1zOiBBcnJheTxUZWFtPiA9IFtdO1xuXG4gIEBPdXRwdXQoKSBjcmVhdGU6IEV2ZW50RW1pdHRlcjxNYW5hZ2VyPiA9IG5ldyBFdmVudEVtaXR0ZXI8TWFuYWdlcj4oKTtcblxuICBvcGVuZWQgPSBmYWxzZTtcbiAgc2l6ZSA9ICdtZCc7XG5cbiAgLy8gRm9ybSBQcm9wZXJ0aWVzXG4gIG5hbWUgPSAnJztcbiAgZW1haWwgPSAnJztcbiAgdGVhbUlkID0gJyc7XG4gIGFkbWluID0gZmFsc2U7XG4gIHNlbGVjdGVkT3B0aW9uID0gJ29uZSc7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGdldCB0ZWFtc1dhcm5pbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlVGVhbXMubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgb25DbGlja1BsdXNJY29uKCk6IHZvaWQge1xuICAgIHRoaXMubW9kYWw/Lm9wZW4oKTtcbiAgfVxuXG4gIG9uQ2xpY2tDcmVhdGUoKSB7XG5cbiAgICB0aGlzLmNyZWF0ZS5lbWl0KHRoaXMubmV3TWFuYWdlcik7XG4gICAgdGhpcy5tb2RhbD8uY2xvc2UoKTtcbiAgfVxuXG4gIG9uQ2xpY2tDYW5jZWwoKSB7XG4gICAgdGhpcy5tb2RhbD8uY2xvc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IG5ld01hbmFnZXIoKTogTWFuYWdlciB7XG4gICAgcmV0dXJuIG5ldyBNYW5hZ2VyKCcnLCB0aGlzLnRlYW1JZCwgdGhpcy5lbWFpbCwgdGhpcy5uYW1lLCB0aGlzLnRlYW1JZCAhPT0gJycsIHRoaXMuYWRtaW4pO1xuICB9XG59XG4iLCI8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lXCIgKGNsaWNrKT1cIm9uQ2xpY2tQbHVzSWNvbigpXCI+XG4gICAgPGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLXBsdXNcIj48L2k+XG48L2J1dHRvbj5cblxuPGNsci1tb2RhbCAjY3JlYXRlTWFuYWdlck1vZGFsIFsoY2xyTW9kYWxPcGVuKV09XCJvcGVuZWRcIiBbY2xyTW9kYWxTaXplXT1cInNpemVcIj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtdGl0bGVcIj5BZGQgYSBNYW5hZ2VyPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cbiAgICAgICAgPGZvcm0gY2xyRm9ybT5cbiAgICAgICAgICAgIDxjbHItaW5wdXQtY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5OYW1lPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xySW5wdXQgdHlwZT1cInRleHRcIiBbKG5nTW9kZWwpXT1cIm5hbWVcIiByZXF1aXJlZCBuYW1lPVwibmFtZVwiLz5cbiAgICAgICAgICAgIDwvY2xyLWlucHV0LWNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxjbHItaW5wdXQtY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5FbWFpbDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0IGNscklucHV0IHR5cGU9XCJlbWFpbFwiIFsobmdNb2RlbCldPVwiZW1haWxcIiByZXF1aXJlZCBuYW1lPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgPC9jbHItaW5wdXQtY29udGFpbmVyPlxuICAgICAgICAgICAgPGNsci1zZWxlY3QtY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5UZWFtPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwidGVhbXNXYXJuaW5nXCI+Tm8gYXZhaWxhYmxlIHRlYW1zPC9kaXY+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbHJTZWxlY3QgWyhuZ01vZGVsKV09XCJ0ZWFtSWRcIiBuYW1lPVwidGVhbVwiPlxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cImxldCBhdmFpbGFibGVUZWFtIG9mIGF2YWlsYWJsZVRlYW1zXCIgW3ZhbHVlXT1cImF2YWlsYWJsZVRlYW0uaWRcIj57e2F2YWlsYWJsZVRlYW0ubmFtZX19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L2Nsci1zZWxlY3QtY29udGFpbmVyPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lXCIgKGNsaWNrKT1cIm9uQ2xpY2tDYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiAoY2xpY2spPVwib25DbGlja0NyZWF0ZSgpXCI+Q3JlYXRlPC9idXR0b24+XG4gICAgIDwvZGl2PlxuPC9jbHItbW9kYWw+Il19